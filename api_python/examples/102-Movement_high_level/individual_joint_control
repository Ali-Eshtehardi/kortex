
import sys
import os
import time
import threading
import math

from kortex_api.autogen.client_stubs.BaseClientRpc import BaseClient
from kortex_api.autogen.client_stubs.BaseCyclicClientRpc import BaseCyclicClient

from kortex_api.autogen.messages import Base_pb2, BaseCyclic_pb2, Common_pb2

TIMEOUT_DURATION = 20  # (seconds)
GRIPPER_POS_01 = 0.00  # gripper full open
GRIPPER_POS_02 = 0.50  # gripper half close
BASE01_POS_X = 0.08  # (meters)
BASE01_POS_Z = 0.40  # (meters)
BASE01_ANG_X = 90  # (degrees)


A0_TURN_DEGREE = 0  # Actuator ID0 turn degree
#A1_TURN_DEGREE = 10 # Actuator ID1  turn degree
#A2_TURN_DEGREE = +30  # Actuator ID2 turn degree
A3_TURN_DEGREE = 0  # Actuator ID3 turn degree
#A4_TURN_DEGREE = +30  # Actuator ID4 turn degree
A5_TURN_DEGREE = -90  # Actuator ID5 turn degree
#A6_TURN_DEGREE = +30  # Actuator ID6 turn degree

def check_for_end_or_abort(e):
    """Return a closure checking for END or ABORT notifications

    Arguments:
    e -- event to signal when the action is completed
        (will be set when an END or ABORT occurs)
    """
    def check(notification, e = e):
        print("EVENT : " + \
              Base_pb2.ActionEvent.Name(notification.action_event))
        if notification.action_event == Base_pb2.ACTION_END \
        or notification.action_event == Base_pb2.ACTION_ABORT:
            e.set()
    return check

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


def example_move_to_home_position(base):
    # Make sure the arm is in Single Level Servoing mode
    base_servo_mode = Base_pb2.ServoingModeInformation()
    base_servo_mode.servoing_mode = Base_pb2.SINGLE_LEVEL_SERVOING
    base.SetServoingMode(base_servo_mode)
    
    # Move arm to ready position
    print("Moving the arm to a safe position")
    action_type = Base_pb2.RequestedActionType()
    action_type.action_type = Base_pb2.REACH_JOINT_ANGLES
    action_list = base.ReadAllActions(action_type)
    action_handle = None
    for action in action_list.action_list:
        if action.name == "Home":
            action_handle = action.handle

    if action_handle == None:
        print("Can't reach safe position. Exiting")
        return False

    e = threading.Event()
    notification_handle = base.OnNotificationActionTopic(
        check_for_end_or_abort(e),
        Base_pb2.NotificationOptions()
    )

    base.ExecuteActionFromReference(action_handle)
    finished = e.wait(TIMEOUT_DURATION)
    base.Unsubscribe(notification_handle)

    if finished:
        print("Safe position reached")
    else:
        print("Timeout on action notification wait")
    return finished
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

def go_to_base2(base):  # angular_action
    print("Starting angular action movement to go to Dropout Location ...")
    action = Base_pb2.Action()

    measured_angles = base.GetMeasuredJointAngles()
    actuator_count = base.GetActuatorCount()
    angles = []
    for joint_id in range(actuator_count.count):
        angles.append(measured_angles.joint_angles[joint_id].value)
    print(angles)


    angles[0] = angles[0] - A0_TURN_DEGREE
    #angles[1] = angles[1] - A1_TURN_DEGREE
    #angles[2] = angles[2] - A2_TURN_DEGREE
    angles[3] = angles[3] - A3_TURN_DEGREE
    #angles[4] = angles[4] - A4_TURN_DEGREE
    angles[5] = angles[5] - A5_TURN_DEGREE
    #angles[6] = angles[6] - A6_TURN_DEGREE
  

    for joint_id in range(actuator_count.count):
        joint_angle = action.reach_joint_angles.joint_angles.joint_angles.add()
        joint_angle.joint_identifier = joint_id
        joint_angle.value = angles[joint_id]

    e = threading.Event()
    notification_handle = base.OnNotificationActionTopic(check_for_end_or_abort(e), Base_pb2.NotificationOptions())

    print("Executing action")
    base.ExecuteAction(action)

    print("Waiting for movement to finish ...")
    finished = e.wait(TIMEOUT_DURATION)
    base.Unsubscribe(notification_handle)

    if finished:
        print("Angular movement completed\n")
    else:
        print("Timeout on action notification wait\n")
    return finished

    

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
def example_cartesian_action_movement(base, base_cyclic):
    
    print("Starting Cartesian action movement ...")
    action = Base_pb2.Action()
    action.name = "Example Cartesian action movement"
    action.application_data = ""

    feedback = base_cyclic.RefreshFeedback()

    cartesian_pose = action.reach_pose.target_pose
    cartesian_pose.x = feedback.base.tool_pose_x    # (meters)  Forward(negative) and backwards(positive)
    cartesian_pose.y = feedback.base.tool_pose_y  - 0.3 # (meters)        left(positive) and right(negative)
    cartesian_pose.z = feedback.base.tool_pose_z   # (meters)   down(positive) and up(negative)
    cartesian_pose.theta_x = feedback.base.tool_pose_theta_x    # (degrees) 6th limb 
    cartesian_pose.theta_y = feedback.base.tool_pose_theta_y  # (degrees)  7th limb
    cartesian_pose.theta_z = feedback.base.tool_pose_theta_z   # (degrees)

    e = threading.Event()
    notification_handle = base.OnNotificationActionTopic(
        check_for_end_or_abort(e),
        Base_pb2.NotificationOptions()
    )

    print("Executing action")
    base.ExecuteAction(action)

    print("Waiting for movement to finish ...")
    finished = e.wait(TIMEOUT_DURATION)
    base.Unsubscribe(notification_handle)

    if finished:
        print("Cartesian movement completed")
    else:
        print("Timeout on action notification wait")
    return finished

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

def main():
    
    # Import the utilities helper module
    sys.path.insert(0, os.path.join(os.path.dirname(__file__), ".."))
    import utilities

    # Parse arguments
    args = utilities.parseConnectionArguments()
    
    # Create connection to the device and get the router
    with utilities.DeviceConnection.createTcpConnection(args) as router:

        # Create required services
        base = BaseClient(router)
        base_cyclic = BaseCyclicClient(router)

        # Example core
        success = True

        #success &= example_move_to_home_position(base)
        #success &= example_cartesian_action_movement(base, base_cyclic)
        success = go_to_base2(base)
        

    return 0 if success else 1

if __name__ == "__main__":
    exit(main())